TDD cycle: 
1. Write a test. Run it to see if it fails.
2. Add a small amount of code to make it run. Run all tests to verify it passes. 
4. Refactor (simplify, make interfaces, de-couple classes) and run tests again to verify.  

Why TDD? 
1. Make sure you're clear on what your goal actually is. 
2. Don't write useless code. 
3. Write code in small enough chunks that you can verify that it's correct, and debugging is easy.
4. Maintain your focus by writing small things so you don't get distracted, lost, or confused or write useless code;
and by creating easy times to take breaks and check-in on your goals - in between cycles. 
5. Keep your code correct at all times or know immediately that it doesn't work and what broke, by
having tests for all your code that are easy to run, and running them frequently - every cycle. 
6. Keep your code clean by refactoring frequently - every cycle. 

TODO: 
Specifications - 
	ask Tim what are the requirements/who are they from
		GS1-128, PTI, whole foods, ccof, ?
		
Make a label for each in qty - 
	
Printing
	print the label -
		how can you talk to a printer?
		or, what format - jpg, pdf, etc - can every printer print? 
	labelTests - how can I test this without myself visually checking? Just the existence of the label? or research UI tests? 
	verify GTINs correct and scannable

Order-entry form - 
	what info do we put on an invoice/Christina's page - 
	info from spreadsheets - 
		gtin - 
		description - 
		name - 
		unit - 
	save to display - 
	save to csv - 

Initialize program from saved order csv - 	

Run on computer as application - 
	run on Mac as application - 
	run on multiple computers at once - 

Display of stored orders - 
	table of companies/orders and items - DONE
	select which want to print - 
	update in real time - 
	make pretty - 

Import to quickbooks - 
	select which orders to import - 
	IIF file - 
	how get invoice number? user enters? or auto on import? or?  

TESTS:
- print with 1 label
- print with multiple labels
- bar codes scannable
		https://www.producetraceability.org/resources/ has a GTIN checker and VPC checker


LATER:
autopopulation eg of company, item
error checking of input info
change settings within app, eg label size
possibly I should include a lot # and/or pack date in the bar code
make hrv align with bar segments
error check people invalid input - customers, products, invalid dates, gtins
ck lot code with Jessie - I did YYMMDD. can change to whatever. 
get own CRC code working
what do if company name is really long? do they only put in abbreviations? right now I have up to 24 characters, size-wise
UI bugs - ahh, UI testing is a pain

DONE:
Using a nice IDE - DONE
Backup to GitHub - DONE
Read from an Excel file - DONE
Make a label graphic - DONE
	Graphics library - DONE
		Trying Java 2D: https://docs.oracle.com/javase/tutorial/2d/ - Nice!
		See also: example: https://docs.oracle.com/javase/tutorial/2d/basic2d/examples/WeatherWizard.java
				Javadocs for graphics2D library 
	Bar code - DONE
		lines - DONE
		human readable version - DONE
	Customer - DONE
	Product - DONE
	Generic label info - DONE
	Pack date - DONE
	Voice pick code - DONE
		Calculate - DONE
		ck against examples - DONE
		formatting - DONE
	Rectangles - DONE
Print label graphic - DONE
	Make all lay out nicely, font sizes right, and change magic numbers to constants/variables - DONE
	to paper - YEAH! DONE
	dimensions, e.g. of bar code - DONE
	test whether printAll prints 1 page - sweet it does! DONE 
	make background white so doesn't use ink to print - DONE
	label is 4" wide by 3.5" tall
	see: https://answers.microsoft.com/en-us/windows/forum/windows_10-hardware-winpc/microsoft-print-to-pdf-custom-paper-sizes-possible/90ed3d48-1ece-4ca5-8d3b-ff0af24a7b37
	make larger - DONE
	make save on other 180 deg - DONE
De-couple classes, make interfaces, and write tests for everything - 
	Date - DONE
	CRC16 generator - DONE
	Bar code generator - DONE
	Voice pick code generator - DONE
Understand and write classes for:
	display the label to the screen - DONE
		start over with the label graphics - can be so much cleaner - DONE
	build a label -> specifically the RDFlabel - DONE
		make Tim's edits - DONE
		scannable - DONE
	make viewing labels scrollable - DONE